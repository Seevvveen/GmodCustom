@name 
@inputs 
@outputs 
@persist [Chip]:entity [Stage SysTime SavedTime]:number [ShieldProps]:array
@trigger

@model models/props_junk/garbage_plasticbottle003a.mdl

#include "holo_func"

Chip = entity()
Chip:propFreeze(0)
Chip:setAlpha(0)

ShieldProps = array()

SysTime = systime()
SavedTime = SysTime

#[
    Setup Holos
]#

# main barrier
hlx(1, Chip, "models/props_phx/misc/soccerball.mdl", "models/debug/debugwhite", vec(1), vec4(255, 20, 20, 0), Chip:toWorld(vec(0, 0, -7)), Chip:toWorld(ang(0, 0, 0)), 1)
hlx(2, Chip, "models/props_phx/misc/soccerball.mdl", "models/debug/debugwhite", vec(1), vec4(255, 20, 20, 0), Chip:toWorld(vec(0, 0, -7)), Chip:toWorld(ang(0, 0, 0)), 1)

hlx(3, Chip, "models/props_phx/misc/soccerball.mdl", "models/debug/debugwhite", vec(0.3), vec4(255, 20, 20, 0), Chip:toWorld(vec(0, 0, 0)), Chip:toWorld(ang(0, 0, 0)), 1)

# top lock
const BaseMaterial = "models/props_vents/borealis_vent001c"

hlx(4, Chip, "models/props_phx/gears/bevel9.mdl", BaseMaterial, vec(0.54, 0.54, 1.5), vec4(255), Chip:toWorld(vec(0, 0, 6)), Chip:toWorld(ang(180, 0, 0)), 0)
hlx(5, holoEntity(4), "models/props_phx/construct/metal_plate_curve360.mdl", BaseMaterial, vec(0.07, 0.07, 0.015), vec4(255), Chip:toWorld(vec(0, 0, -1.5)), Chip:toWorld(ang(0, 0, 0)), 0)

# bottom lock
hlx(6, Chip, "models/props_phx/gears/bevel9.mdl", BaseMaterial, vec(0.54, 0.54, 1.5), vec4(255), Chip:toWorld(vec(0, 0, -6)), Chip:toWorld(ang(0)), 0)
hlx(7, holoEntity(6), "models/props_phx/construct/metal_plate_curve360.mdl", BaseMaterial, vec(0.07, 0.07, 0.015), vec4(255), Chip:toWorld(vec(0, 0, 1)), Chip:toWorld(ang(0, 0, 0)), 0)    

#[
    Functions
]#

function void updateAnimations() {
    SysTime = systime()
    local DT = SysTime - SavedTime 
    
    local AnimationTime = 1
    local Factor = DT / AnimationTime

    switch (Stage) { 
        case 1, # open
            if (DT < AnimationTime) {
                holoPos(4, Chip:toWorld(vec(0, 0, 6 + (3 * Factor))))
                holoPos(6, Chip:toWorld(vec(0, 0, -6 + (-3 * Factor))))
                
                for (I = 1, 3) {
                    holoAlpha(I, 50 * Factor)
                }
                
                holoScale(1, vec(45 * Factor))
                holoScale(2, vec(-45 * Factor))
                holoScale(3, vec(0.3 * Factor))
            }
            else {
                holoPos(4, Chip:toWorld(vec(0, 0, 9)))
                holoPos(6, Chip:toWorld(vec(0, 0, -9)))
                
                for (I = 1, 3) {
                    holoAlpha(I, 50)
                }
                
                holoScale(1, vec(45))
                holoScale(2, vec(-45))
                holoScale(3, vec(0.3))
                
                Chip:propFreeze(1)
    
                Stage = 3
                SavedTime = SysTime
            }
        break

        case 2, # close 
            if (DT < AnimationTime) {
                holoPos(4, Chip:toWorld(vec(0, 0, 9 - (3 * Factor))))
                holoPos(6, Chip:toWorld(vec(0, 0, -9 - (-3 * Factor))))
                
                for (I = 1, 3) {
                    holoAlpha(I, 50 - (50 * Factor))
                }
                
                holoScale(1, vec(45 - (45 * Factor)))
                holoScale(2, vec(-45 - (-45 * Factor)))
                holoScale(3, vec(0.3 - (0.3 * Factor)))
            }
            else {
                holoPos(4, Chip:toWorld(vec(0, 0, 6)))
                holoPos(6, Chip:toWorld(vec(0, 0, -6)))
                
                for (I = 1, 3) {
                    holoAlpha(I, 0)
                }

                Chip:propFreeze(0)
    
                Stage = 0
                SavedTime = SysTime
            }      
        break

        case 3, # spinny garbage
            holoAng(1, Chip:toWorld(ang(0, SysTime * 10, 0)))
            holoAng(2, Chip:toWorld(ang(0, SysTime * 10, 0)))
            holoAng(3, Chip:toWorld(ang(0, SysTime * 10, 0)))
            
            holoAng(4, Chip:toWorld(ang(180, SysTime * 100, 0)))
            holoAng(6, Chip:toWorld(ang(0, -(SysTime * 100), 0)))

            Chip:propFreeze(1)

            SavedTime = SysTime
        break

        default,
            SavedTime = SysTime
        break
    }
}

function void updatePhysics() {
    if(Stage != 1){
        return
    }

    local R = rangerOffset(100, Chip:massCenter(),vec(0, 0, -1))
    local Pos = R:position() - Chip:pos() + vec(0, 0, 30)
    Chip:applyForce((Pos * 10 - Chip:vel()) * Chip:mass())

    local LevAngle = angnorm(-Chip:angles()) * 15 - Chip:angVel() * 2
    local Leverage = Chip:inertia():length()
    Chip:applyAngForce(LevAngle * Leverage)
}

function void handleShieldProps() {
    if (Stage != 1) {
        if (ShieldProps:count() > 1){
            ShieldProps:clear()   
        }
        
        return   
    }
    
    #[
    print(ShieldProps:count())
    while (ShieldProps:count() < 20 && propCanCreate()) {
        local CurrProp = propSpawn("models/hunter/blocks/cube4x6x05.mdl", Chip:toWorld(vec(cos(SysTime * 20) * 380, sin(-SysTime * 20) * 380, 0)), 1)
        #local TY = -bearing(CurrProp:pos(), ang(0), entity():pos()) 
        #CurrProp:setAng(entity():toWorld(ang(0,TY+70,90)))
        CurrProp:setMass(50000)
        #CurrProp:setAlpha(100)
        
        ShieldProps:pushEntity(CurrProp)   
    }
    ]#
}

#[
    Events
]#

event keyPressed(Player:entity, Key:string, Down:number, KeyBind:string) {
    if (Player == owner() && Down) {
        if (Key:lower() == "r") {
            Stage = 1
        }

        if (Key:lower() == "t") {
            Stage = 2
        }
    }   
}

event tick() {
    updatePhysics()
    updateAnimations()
    handleShieldProps()
}
