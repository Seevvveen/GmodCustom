@persist [RailgunData RGTransmutationQueue]:array Railguns:table Spin Reloading Ammo RGT
#include "libraries/multi-holo"
if(first()){
    Railguns = table()
    
    RailgunData = array(
        "models/props_combine/combine_binocular01.mdl",
        "models/props_combine/tprotato1.mdl",
        "models/1tems/combine_rifle_ammo01.mdl",
        "models/props_c17/oildrum001.mdl",
        "models/props_c17/oildrum001.mdl",
        "models/holograms/hq_sphere.mdl",
        "models/holograms/hq_sphere.mdl",
        "models/sprops/geometry/fring_36.mdl",
        "models/props_phx/construct/metal_plate_curve360.mdl",
        "models/props_phx/construct/metal_plate_curve360.mdl",
        "models/props_phx/construct/metal_plate_curve360.mdl",
                
        "models/props_vents/borealis_vent001c",
        "models/props_vents/borealis_vent001c",
        "models/props_vents/borealis_vent001c",
        "models/props_vents/borealis_vent001c",
        "models/props_vents/borealis_vent001c",
        "",
        "",
        "models/props_vents/borealis_vent001c",
        "models/debug/debugwhite",
        "models/debug/debugwhite",
        "models/debug/debugwhite",
    
        vec(1,1,1),
        vec(0.3,0.1,0.4),
        vec(1,1,1),
        vec(0.1,0.1,1.3),
        vec(0.1,0.1,1),
        vec(-0.5,-0.5,-0.5),
        vec(0.35,0.35,0.35),
        vec(0.3,0.3,0.3),
        vec(0.3,0.3,0.07),
        vec(0.2,0.2,0.07),
        vec(0.12,0.12,0.07),
    
        vec(-12,1,0),
        vec(15,2,3),
        vec(0,4,-5),
        vec(5,2,0),
        vec(5,2,-2),
        vec(0,2,-1),
        vec(0,2,-1),
        vec(0,2,-1),
        vec(-5,0,0),
        vec(-9,0,0),
        vec(50,0,0),
                         
        ang(270,1,1),
        ang(270,180,0),
        ang(270,1,1),
        ang(0,90,90),
        ang(0,90,90),
        ang(0,0,0),
        ang(0,0,0),
        ang(0,0,0),
        ang(90,0,0),
        ang(90,0,0),
        ang(90,0,0),

        vec4(255,255,255,255),               
        vec4(255,255,255,255),
        vec4(255,255,255,0),
        vec4(255,255,255,255),
        vec4(255,255,255,255),
        vec4(255,0,0,100),
        vec4(255,0,0,170),
        vec4(255,255,255,255),
        vec4(255,0,0,150),
        vec4(255,0,0,150),
        vec4(255,0,0,150),
    
        0,0,0,0,0,1,1,0,1,1,1
    )
    
    RailgunData[0,number] = 11
    
    RGTransmutationQueue = array()
    
    Ammo = 0
    Reloading = 0
    RGT = 0
    
    function void transmuteRailgun(Entity:entity){
        RGTransmutationQueue:pushEntity(Entity)
    }
    
    function void railgunFunctionality(RGFire:number, HitPos:vector, RangerHitEntites:number){
        if(RGTransmutationQueue:count() > 0 && holoRemainingSpawns() > 14){
            if(RGTransmutationQueue[1, entity]:isValid()){
                local HoloArray = multiHolo(RGTransmutationQueue[1, entity], RailgunData)
                HC++
                LH1 = holoCreate(HC)
                holoAlpha(HC,0)
                
                HC++
                LH2 = holoCreate(HC)
                holoAlpha(HC,0)
                
                HC++                             
                LH3 = holoCreate(HC)
                holoAlpha(HC,0)
                                
                for(I = 1, 3){                
                    holoParent(HC + I, RGTransmutationQueue[1, entity])
                }
                

                Railguns:pushTable(table(RGTransmutationQueue[1, entity], HoloArray, array(LH1, LH2, LH3)))
                RGTransmutationQueue[1,entity]:setAlpha(0)

                if (Ammo) {
                    RGTransmutationQueue[1, entity]:soundPlay(Railguns:count() + 1250,0, "ambient/atmosphere/tunnel1.wav")
                    soundPitch(Railguns:count() + 1250, 92 + 8 * Ammo)                  
                }
            }

            RGTransmutationQueue:remove(1)
        }
        
        local RGC = Railguns:count()
        
        if (changed(RGC) && RGC == 0) {
            Ammo = 0
            for(I = 1, 20){
                soundStop(I + 1250)
            }
        }
        
        for (I = 1, RGC) {
            local CurrGunEnt = Railguns[I, table][1, entity]
            local CurrGunLaserHolos = Railguns[I, table][3, array]
            
            local TX = -elevation(CurrGunEnt:pos(), ang(0,0,0), HitPos)
            local TY = -bearing(CurrGunEnt:pos(), ang(0,0,0), HitPos) 
            
            local DesiredAngle = ang(TX,TY,0)
        
            if(CurrGunEnt == noentity()){
                for(I=1,CurrGunLaserHolos:count()){
                    holoDelete(holoIndex(CurrGunLaserHolos[I,entity]))
                }
                
                soundStop(I+1250)
                Railguns:remove(I)
            }
            
            if(Ammo || Reloading){
                CurrGunEnt:setAng(DesiredAngle)
                CurrGunEnt:applyAngForce(-CurrGunEnt:angVel()*16)
            }else{
                local LevAngle = angnorm(-CurrGunEnt:angles()+DesiredAngle)*15-CurrGunEnt:angVel()*2
                local Leverage = CurrGunEnt:inertia():length()
                CurrGunEnt:applyAngForce(LevAngle*Leverage)
            }
        }
        
        if(changed(RGFire) & RGFire & RGC > 0){
            if(!Ammo){
                if(!Reloading){
                    for(I=1,RGC){
                        local CurrGunEnt = Railguns[I,table][1,entity]
                        local LaserHolos = Railguns[I,table][3,array]
                        
                        CurrGunEnt:soundPlay(I+1000,1.6,"weapons/cow_mangler_over_charge.wav")
                        
                        for(A=1,LaserHolos:count()){
                            holoPos(holoIndex(LaserHolos[A,entity]),CurrGunEnt:toWorld(vec(30,0,0)))
                            LaserHolos[A,entity]:setTrails(100,0,1.6,"trails/laser",vec(255,0,0),255)     
                        }
        
                    }
                    Spin = 1
                    Reloading = 1
                    timer("reload",1600)
                }
            }else{
                Ammo--
                for(I=1,RGC){
                    if(Ammo){
                        soundPitch(I+1250,92+8*Ammo)
                    }else{
                        soundStop(I+1250)
                    }
                    
                    local CurrGunEnt = Railguns[I,table][1,entity]
                    local CurrGunLaserHolo = holoIndex(Railguns[I,table][3,array][Ammo+1,entity])
                    
                    rangerFilter(CurrGunEnt)
                    rangerHitEntities(RangerHitEntites)

                    holoUnparent(CurrGunLaserHolo)
                    
                    local RangerPos = rangerOffset(50000,CurrGunEnt:pos(),CurrGunEnt:forward()):position()
                    holoPos(CurrGunLaserHolo,RangerPos)
                                        
                    CurrGunEnt:soundPlay(I+1500,1.5,"weapons/cow_mangler_main_shot.wav")
                    
                    #ifdef boom(vector,number,number)
                        boom(RangerPos,9999999999999999999999999,400)
                        CurrGunEnt:turretShoot(CurrGunEnt:forward(),99999999999999999999999999999999999999999,0,9999999999999999999,1,"")
                    #else
                    #endif
                    propSpawn("models/props_phx/torpedo.mdl",RangerPos,ang(0,0,0),1):propBreak()
                    

                                                            
                    switch(Ammo+1){
                        case 1,
                            timer("simmer1",1000)
                        break
                        
                        case 2,
                            timer("simmer2",1000)
                        break
                        
                        case 3,
                            timer("simmer3",1000)
                        break
                    }
                }
            }
        }
        
        if(Spin){    
            RGT = RGT + 30*Ammo + 90*Reloading
            
            for(I=1,RGC){
                local CurrGunEnt = Railguns[I,table][1,entity]
                local SpinHolo = holoIndex(Railguns[I,table][2,array][8,entity])
                
                holoAng(SpinHolo,CurrGunEnt:toWorld(ang(0,0,RGT)))
            }
        }
        
        if(clk("reload")){
            for(I=1,RGC){
                Railguns[I,table][1,entity]:soundPlay(I+1250,0,"ambient/atmosphere/tunnel1.wav")
                soundPitch(I+1250,116)
            }
            Ammo = 3
            Reloading = 0
        }
        
        if(clk("simmer1")){
            for(I=1,RGC){
                local CurrGunEnt = Railguns[I,table][1,entity]
                local CurrGunLaserHolo = holoIndex(Railguns[I,table][3,array][1,entity])      
                   
                Railguns[I,table][3,array][1,entity]:removeTrails()
                
                holoPos(CurrGunLaserHolo,CurrGunEnt:toWorld(vec(30,0,0)))
                holoParent(CurrGunLaserHolo,CurrGunEnt)
            }
        }
        
        if(clk("simmer2")){
            for(I=1,RGC){  
                local CurrGunEnt = Railguns[I,table][1,entity]
                local CurrGunLaserHolo = holoIndex(Railguns[I,table][3,array][2,entity])
                    
                Railguns[I,table][3,array][2,entity]:removeTrails()
                
                holoPos(CurrGunLaserHolo,CurrGunEnt:toWorld(vec(30,0,0)))
                holoParent(CurrGunLaserHolo,CurrGunEnt)
            }
        }
            
        if(clk("simmer3")){
            for(I=1,RGC){
                local CurrGunEnt = Railguns[I,table][1,entity]
                local CurrGunLaserHolo = holoIndex(Railguns[I,table][3,array][3,entity])
                
                Railguns[I,table][3,array][3,entity]:removeTrails()
                
                holoPos(CurrGunLaserHolo,CurrGunEnt:toWorld(vec(30,0,0)))
                holoParent(CurrGunLaserHolo,CurrGunEnt)
            }
        }
    }
}
